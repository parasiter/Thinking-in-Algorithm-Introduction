20.3-1 修改vEB树以支持重复关键字。
20.3-1 修改vEB树以支持带有卫星数据的关键字
重复关键字的重复次数可以看成是卫星数据中包含的一个属性，而卫星数据可以看成多个属性而已，在C++中可以用map来完成实现。

20.3-3 写出创建空van Emde Boas过程的伪代码
//C++忘个干净，完全忘了怎么写
CREAT-vEB-TREE(x)
{
	V.u = x;
	V.min = NIL;
	V.max = NIL;
	if(V.u>2)
	{
		V.summary = CREAT-vEB-TREE(sqrt(x))
		for(i=1;i<sqrt(x)&$V.u>2;i++)
		{
			V.cluster = CREAT-vEB-TREE(sqrt(x));
		}
	}
}	

20.3-4 如果调用vEB-TREE-INSERT来插入一个已包含在vEB树中的元素，会出现什么情况？如果调用vEB-TREE-DELETE来插入一个不包含在vEB树中的元素，会出现什么情况？解释这些函数为什么会有相应的运行情况？怎样修改vEB树和操作，使得常数时间内能判断一个元素是否在其中？
a vEB树的元素所在位置为所有结构中的V.min和最底层的基础结构中，并且基础结构可储存U的全域，因此除底层外的各个V.min储存元素后，这些元素将不会被储存到底层中，因此如果插入的一个元素与在V.min中的元素重复，则会导致本层的元素V.min被压入到下一层，进行递归。
b 如果调用vEB-TREE-DELETE来插入一个不包含在vEB树中的元素，同样会出错，假设给出的vEB树只包含一个元素A，则V.min =A,V.max =A,其他元素簇均为空，假设删除B，那么直接vEB-TREE-DELETE（x）会直接将其A删除,而不论x的值。

20.3-5 假设我们创建一个包含u^1/k个簇的vEB树，其每个簇的全域大小为u^(1-1/k),其中k>1,而且k为常数。如果恰当地修改这些操作，则这些操作的运行时间是多少？为了分析方便，假设u^1/k和u(1-1/k)总是为整数。
按照要求修改后，树高的渐进复杂度仍然为O（lglgu）。因此,所有操作的时间均不会改变。

20.3-6 创建一个全域大小为u的vEB树，需要O（u）的运行时间，假设我们想要得到确切时间。如果vEB树中每个操作的摊还时间为O（lglgu）,那么最小操作数n是多少？
