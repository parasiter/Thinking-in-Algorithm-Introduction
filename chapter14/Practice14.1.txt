14.1-1 对于图14-1的红黑树T，说明执行OS-SELECT(T.root,10)的过程。
略

14.1-2 对于图14-1的红黑树T和关键字x.key为35的结点x，说明执行OS-RANK(T,x)
略

14.1-3 写出OS-SELECT的非递归版本。
OS-SELECT(x,i)
{
	r = x.left.size+1;
	while(r!=i)
	{
		if(r<i)
		{
			i = i-r;
			x = x.right;
		}
		else
		{
			i = r-i;
			x = x.left;
		}
		r = x.left.size + 1
	}
}

14.1-4 写出一个递归过程OS-KEY-RANK（T，k），以一棵顺序统计树T和一个关键字k作为输入，要求返回k在由T表示的动态集合中的秩，假设关键字都不相同。
OS-KEY-RANK(T.root,k)
{
	x = T.root;
	if(k == x.key)
		return OS-RANK（T,x）;
	else if(k<x.key)
		OS-KEY-RANK(x.left,k);
	else OS-KEY-RANK（x.right,k）;
}

14.1-5 给定n个元素的顺序统计树中的一个元素x和一个自然数i,如何在O（lgn）的时间内确定x在该树线性序中的第i个后继。
第一种方案：调用OS-RANK(T,x),确定x的秩j，再调用OS-SELECT(T.root,i+j),只需要O（lgn）的时间
第二种方案代码如下：
OS-FIND(x,i)
{	
	if(i==0)
		return x;
	r = x.right.size;
	if(i<=r)
	{
		OS-RANK(x.right,i);
	}
	else
	{
		while(x == x.p.right)
			x = x.p;
		OS-FIND(x.p,i-r-1);	
	}	
}
方案二减少了方案一中的重叠循环部分。

14.1-6 在0S-SELECT或OS-RANK中，注意无论什么时候引用结点的size属性都是为了计算一个秩，相应的，假设每个结点都储存它在自己为根中的秩，试说明在插入和删除时，该如何维护这个秩。
插入过程中，所有大于X.key的结点，其秩均要加1，操作时间为O（n），另外右旋或者左旋时，会导致β（具体位置看书）子树内的所有结点秩+1或-1；因此，总操作时间为O（n）
在删除过程中，同上。

14.1-7 说明如何在O（nlgn）时间内，利用顺序统计树对大小为n的数组中的逆序对进行计数。
伪代码如下：
count = 0;
INVERTION-PAIR-COUNT(T.root)
{
	x = T.root;
	while(x.left != T.NIL)
	{
		count =count+x.h;
		if(x.right != T.nil)
			INVERTION-PAIR-COUNT(x.right);
		x = x.left;
	}
	return count;
}

while循环O（lgn）次，每次对一棵子树计数，次数为O（n），合并运行时间为O（nlgn）.

14.1-8 现有一个圆上的n条弦，每条弦都由其端点来定义。请给出一个能在O（nlgn）时间内确定圆内相交弦对数的算法。
将圆以一点切开，拉直形成一条直线，每一个弦由两点间的曲线相连，则每条弦的属性可以由（Ix，Ij）来表示，两条弦I和J相交的条件即为Ix<Jx<Iy<Jy。
在此基础上，将每条弦视为一个结点，每个结点中I.key =Ix，I.priority = Ij,并增加额外属性I.h保存该结点高度，以此构造红黑树。
由上章证明可知，给定关键字和优先级的结点集合形成唯一红黑树。构成该树的期望运行时间为0（nlgn）,最坏运行时间为O（n^2），进行计算相交弦对的方法与上题类似，只不过改成了求顺序对。其伪代码如下：
count = 0;
INTERSECTING-CHORD-COUNT(T.root)
{
	x = T.root;
	while(x.left != T.NIL)
	{
		count =count+x.h;
		if(x.right != T.nil)
			INTERSECTING-CHORD-COUNT(x.right);
		x = x.left;
	}
	return count;
}
运行时间同上题，为O（nlgn），因此，期望运行时间为0（nlgn）,最坏运行时间为O（n^2）（即n条弦都为直径）。
		





























