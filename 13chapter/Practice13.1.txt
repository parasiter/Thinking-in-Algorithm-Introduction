//这个月都在忙着学R进行芯片数据处理，一个月都没看算法导论，先来个小证明整理下思路，活动活动脑子
证明：一颗有n个内部结点的红黑树高度至多为2lg(n+1)，即证 h<=2lg(n+1)
本证明涉及到红黑树关键性质：
1.结点为红色，其必有两个子结点，且均为黑色
2.每个结点到其叶结点的简单路径上，其黑结点数目相同
h<=2lg(n+1) 
=> n>=2^h/2 - 1
由红黑树性质得知: bh(x)>h/2
=> n>= 2^bh(x) - 1
下面用归纳法证明：
x = T.nil 时，bh（x）=0 
等式左边=0，右边=2^0 -1=0，得证；
x!= T.nil时，考虑x为一个内部节点，设x1，x2为其子结点
依据性质1，当x为红色，则bh（x）=bh(x1)+1=bh(x2)+1;
当x为黑色，依据x1，x2颜色，bh(x)=bh(x1)+1||bh=bh(x);
则bh(x)<=bh(x子)+1,带入不等式中:
n = n(子)+1 >= [2^bh(x子)-1] +[2^bh(x子)-1]+1 
>= [2^(bh(x)-1)-1]*2+1=2^bh(x)-1
即n>=2^bh(x)-1 => h<=2lg(n+1)得证。

13.1-1
略
13.1-2
否，否
13.1-3
是
13.1-4
没看懂题目
13.1-5
最长路径：bh(x)=h/2;
最短路径：bh(x)=h;
所以最长高度最多是最短高度的两倍
13.1-6
由引理13.1证出bh(x')<=bh(x)<=bh(x')+1 (bh(x')为子结点黑高)
若想使内部节点最多，则bh(x')=bh(x)，即父节点为黑色，子结点为红色
又依据红黑树性质，x''必为黑色，因此，内部节点最多时即为每一层红黑交错的红黑树。
此时bh(x)=(h+1)/2, n=2^2bh(x) - 1;
内部节点最少时，bh(x)=h+1, n=2^bh(x) -1;
13.1-7
依据红黑树性质，每有一个红色节点，其必然会有两个黑色子结点，并且其根节点为黑色，故可推测该比值最大不会超过1/2；
该比值最小时，不存在红色节点，此时比值为0。